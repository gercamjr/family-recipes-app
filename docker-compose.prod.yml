# Production Docker Compose
# For local production-like testing or Vercel deployment

services:
  # PostgreSQL Database (optional - for local testing)
  postgres:
    image: postgres:15-alpine
    container_name: family-recipes-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE:-family_recipes_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - family-recipes-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DATABASE:-family_recipes_prod}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API for production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: family-recipes-backend-prod
    environment:
      # Environment variables (from Vercel or local .env)
      NODE_ENV: production
      PORT: ${PORT:-5001}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    ports:
      - "${PORT:-5001}:${PORT:-5001}"
    networks:
      - family-recipes-network
    depends_on:
      postgres:
        condition: service_healthy
    command: npm start

volumes:
  postgres_data:

networks:
  family-recipes-network:
    driver: bridge
